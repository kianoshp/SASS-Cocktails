{"name":"Sass-cocktails","body":"### Mixins\r\nMixins allow for re-use of chunks of CSS. Below is an example of a mixin:\r\n\r\n```\r\n@mixin add-linear-gradient($pos, $G1, $G2: false,\r\n                       $G3: false, $G4: false,\r\n                       $G5: false, $G6: false,\r\n                       $G7: false, $G8: false,\r\n                       $G9: false, $G10: false,\r\n                       $fallback: false) {\r\n                       \r\n  // Detect what type of value exists in $pos\r\n  $pos-type: type-of(nth($pos, 1));\r\n\r\n  // If $pos is missing from mixin, reassign vars and add default position\r\n  @if ($pos-type == color) or (nth($pos, 1) == \"transparent\")  {\r\n    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;\r\n     $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;\r\n    $pos: top; // Default position\r\n\t}\r\n\t\r\n  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);\r\n\t\r\n  // Set $G1 as the default fallback color\r\n  $fallback-color: nth($G1, 1);\r\n\r\n  // If $fallback is a color use that color as the fallback color\r\n  @if type-of($fallback) == color {\r\n    $fallback-color: $fallback;\r\n  }\r\n\r\n  background: $fallback-color;\r\n  background: deprecated-webkit-gradient(linear, $full); // Safari <= 5.0\r\n  background:  -webkit-linear-gradient($pos, $full); // Safari 5.1+, Chrome\r\n  background:     -moz-linear-gradient($pos, $full);\r\n  background:      -ms-linear-gradient($pos, $full);\r\n  background:       -o-linear-gradient($pos, $full);\r\n  background: unquote(\"linear-gradient(#{$pos}, #{$full})\"); \r\n}\r\n```\r\n\r\n### Functions\r\nFunctions are a collection of logic that will be processed and return the desired value. The following is an example of a function:\r\n\r\n```\r\n$defaultBrowserSize: 16;\r\n@function responsiveFontSize($fontSize: $defaultBrowserSize, $isIE: false) {\r\n\t@if $isIE {\r\n\t\t@return (($fontSize/$defaultBrowserSize) - 0.02) + em;\r\n\t} @else {\r\n\t\t@return ($fontSize/$defaultBrowserSize) + em;\r\n\t}\r\n}\r\n\r\n\r\n@function rfs($fontSize: $defaultBrowserSize, $isIE: false) {\r\n\t@return responsiveFontSize($fontSize, $isIE);\r\n}\r\n```\r\n### Custom functions\r\nAny function that is created can be added and declared in Ruby compiler. To add custom functions [click here](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_custom_sass_functions). In most of the mixins and functions I have used the 'compact' function. Declare the following as a custom function:\r\n\r\n```\r\n\t  # Returns a new list after removing any non-true values\r\n\t  def compact(*args)\r\n\t\tsep = :comma\r\n\t\tif args.size == 1 && args.first.is_a?(Sass::Script::List)\r\n\t\t  list = args.first\r\n\t\t  args = list.value\r\n\t\t  sep = list.separator\r\n\t\tend\r\n\t\tSass::Script::List.new(args.reject{|a| !a.to_bool}, sep)\r\n\t  end\r\n```\r\n### Authors and Contributors\r\nI have been taking advantage of 'Thoughtbot' (@thoughtbot) ['Bourbon'](https://github.com/thoughtbot/bourbon) project on some mixins. Thanks guys!!\r\n\r\n### Support or Contact\r\nIf you have any questions, feel free to direct message me on twitter [kianoshp](http://twitter.com/kianoshp)","tagline":"Sass Mixins and Functions","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}